import React, { useState, useEffect } from "react";
import {
  Text,
  View,
  Platform,
  FlatList,
  Dimensions,
  Alert,
} from "react-native";
import styles from "../../styles/globalStyles";
import { Icon } from "react-native-elements";
import Button from "../../components/button";
import * as Sharing from "expo-sharing";
import { printToFileAsync } from "expo-print";

export default function ({ navigation, route }) {
  const htmlReport =
    `<html>
    <head>
        <meta content="text/html; charset=UTF-8" http-equiv="content-type">
    </head>
    <style type="text/css">
    html{font-family: "Helvetica"; color: #2b2b2b;}
        body{min-width: 90vw; margin: 20px; padding: 5%}
        ol{margin:0;padding:0}
        table td,table th{padding:0}
       table {
  width: 100%;
  background-color: #FFFFFF;
  border-collapse: collapse;
  border-width: 2px;
  border-color: #E0E0E0;
  border-style: solid;
 
}

table td, table th {
  border-width: 2px;
  border-color: #E0E0E0;
  border-style: solid;
  padding: 15px;
  text-align: left
 
}

td { color: #2a2a2a;}

tr:nth-child(even){
  background-color: #f5f5f5;
}

table thead {
  background-color: #2B2B2B;
}

tr th{ color: #fefefe;}
    </style>
    <body class="c20 doc-content">
        <h1>MEASUREMENT REPORT</h1>
        <h2>
            Submitted By: ${route.params.packageData.who}, ${
      new Date().toDateString() +
      " " +
      new Date().getHours() +
      ":" +
      ("0" + new Date().getMinutes()).slice(-2)
    }
        </h2>
        <p>Generated by Heli Rigger Pro</p>
        <hr>
        <p>ID Number:${
          route.params.packageData.idNum
            ? route.params.packageData.idNum
            : "None"
        }</p>
        <p>Project Name:${route.params.packageData.project}</p>
        <p>Location:${route.params.packageData.where}` +
    `</p>
        <hr>
        ${(() => {
          let string = "";
          for (let data of route.params.shareData) {
            string += `<div style="display: flex; margin-top: 4%; justify-content: center">
                <table class="customTable">
                    <thead>
                        <tr>
                            <th>Species:</th>
                            <th>${data.species}</th>
                            <th>Time Recorded:</th>
                            <th>${data.time}</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Butt:</td>
                            <td>${data.butt}</td>
                            <td>Volume:</td>
                            <td>${data.volume}</td>
                        </tr>
                        <tr>
                            <td>Top:</td>
                            <td>${data.top}</td>
                            <td>Density:</td>
                            <td>${data.density}</td>
                        </tr>
                        <tr>
                            <td>Length:</td>
                            <td>${data.length}</td>
                            <td>Weight:</td>
                            <td>${data.weight}</td>
                        </tr>
                    </tbody>
                </table>
            </div>`;
          }
          return string;
        })()}
    </body>
</html>

`;
  const [file, setFile] = useState();

  let generatePdf = async () => {
    try {
      const file = await printToFileAsync({
        html: htmlReport,
        base64: false,
        margins: {
          left: 5,
          top: 20,
          right: 5,
          bottom: 50,
        },
      });
      setFile(file);
    } catch (error) {
      Alert.alert(
        "File Error",
        "Please try again, an error occurred while creating your file. Error Info:" +
          error[{ text: "OK" }]
      );
    }
  };

  useEffect(() => {
    const data = navigation.addListener("focus", () => {
      generatePdf();
    });
    return data;
  });

  return (
    <View style={styles.container}>
      {/* uncomment the next line to see selected data */}
      {/* <Text>{JSON.stringify(route.params.shareData)}</Text> */}
      <View style={{ ...styles.denCard, padding: "5%" }}>
        <Text style={{ ...styles.title, margin: "5%", fontSize: 20 }}>
          Select Share Option:
        </Text>
        {Sharing.isAvailableAsync() ? (
          <Button
            width={Dimensions.get("window").width * 0.8}
            text="Share"
            onPress={async () => await Sharing.shareAsync(file.uri)}
          />
        ) : null}

        {Platform.OS === "ios" ? (
          <View>
            <Button
              arrow={true}
              style={{ margin: "5%" }}
              width={Dimensions.get("window").width * 0.8}
              text="Review Report"
              onPress={() =>
                navigation.navigate("View Document", {
                  file: file,
                  action: "Save",
                })
              }
            />
            <Button
              arrow={true}
              width={Dimensions.get("window").width * 0.8}
              text="Send as Email"
              onPress={() =>
                navigation.navigate("View Document", {
                  file: file,
                  action: "Email",
                })
              }
            />
          </View>
        ) : (
          <View>
            <Button
              style={{ margin: "5%" }}
              width={Dimensions.get("window").width * 0.8}
              text="start a new report"
              arrow
              bg="#434A5D"
              onPress={() => navigation.navigate("Calculation History")}
            />
          </View>
        )}
      </View>
    </View>
  );
}
